package louis.greendaodemo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import louis.greendaodemo.greendao.entity.Area;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA".
*/
public class AreaDao extends AbstractDao<Area, Void> {

    public static final String TABLENAME = "AREA";

    /**
     * Properties of entity Area.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AreaId = new Property(0, String.class, "areaId", false, "AREA_ID");
        public final static Property AreaNameCN = new Property(1, String.class, "areaNameCN", false, "AREA_NAME_CN");
        public final static Property AreaNameEN = new Property(2, String.class, "areaNameEN", false, "AREA_NAME_EN");
        public final static Property AreaNameShorter = new Property(3, String.class, "areaNameShorter", false, "AREA_NAME_SHORTER");
        public final static Property CountryCode = new Property(4, String.class, "countryCode", false, "COUNTRY_CODE");
        public final static Property AttributionCNOne = new Property(5, String.class, "attributionCNOne", false, "ATTRIBUTION_CNONE");
        public final static Property AttributionENOne = new Property(6, String.class, "attributionENOne", false, "ATTRIBUTION_ENONE");
        public final static Property AttributionCNTwo = new Property(7, String.class, "attributionCNTwo", false, "ATTRIBUTION_CNTWO");
        public final static Property AttributionENTwo = new Property(8, String.class, "attributionENTwo", false, "ATTRIBUTION_ENTWO");
    }


    public AreaDao(DaoConfig config) {
        super(config);
    }
    
    public AreaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA\" (" + //
                "\"AREA_ID\" TEXT," + // 0: areaId
                "\"AREA_NAME_CN\" TEXT," + // 1: areaNameCN
                "\"AREA_NAME_EN\" TEXT," + // 2: areaNameEN
                "\"AREA_NAME_SHORTER\" TEXT," + // 3: areaNameShorter
                "\"COUNTRY_CODE\" TEXT," + // 4: countryCode
                "\"ATTRIBUTION_CNONE\" TEXT," + // 5: attributionCNOne
                "\"ATTRIBUTION_ENONE\" TEXT," + // 6: attributionENOne
                "\"ATTRIBUTION_CNTWO\" TEXT," + // 7: attributionCNTwo
                "\"ATTRIBUTION_ENTWO\" TEXT);"); // 8: attributionENTwo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Area entity) {
        stmt.clearBindings();
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(1, areaId);
        }
 
        String areaNameCN = entity.getAreaNameCN();
        if (areaNameCN != null) {
            stmt.bindString(2, areaNameCN);
        }
 
        String areaNameEN = entity.getAreaNameEN();
        if (areaNameEN != null) {
            stmt.bindString(3, areaNameEN);
        }
 
        String areaNameShorter = entity.getAreaNameShorter();
        if (areaNameShorter != null) {
            stmt.bindString(4, areaNameShorter);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(5, countryCode);
        }
 
        String attributionCNOne = entity.getAttributionCNOne();
        if (attributionCNOne != null) {
            stmt.bindString(6, attributionCNOne);
        }
 
        String attributionENOne = entity.getAttributionENOne();
        if (attributionENOne != null) {
            stmt.bindString(7, attributionENOne);
        }
 
        String attributionCNTwo = entity.getAttributionCNTwo();
        if (attributionCNTwo != null) {
            stmt.bindString(8, attributionCNTwo);
        }
 
        String attributionENTwo = entity.getAttributionENTwo();
        if (attributionENTwo != null) {
            stmt.bindString(9, attributionENTwo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Area entity) {
        stmt.clearBindings();
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(1, areaId);
        }
 
        String areaNameCN = entity.getAreaNameCN();
        if (areaNameCN != null) {
            stmt.bindString(2, areaNameCN);
        }
 
        String areaNameEN = entity.getAreaNameEN();
        if (areaNameEN != null) {
            stmt.bindString(3, areaNameEN);
        }
 
        String areaNameShorter = entity.getAreaNameShorter();
        if (areaNameShorter != null) {
            stmt.bindString(4, areaNameShorter);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(5, countryCode);
        }
 
        String attributionCNOne = entity.getAttributionCNOne();
        if (attributionCNOne != null) {
            stmt.bindString(6, attributionCNOne);
        }
 
        String attributionENOne = entity.getAttributionENOne();
        if (attributionENOne != null) {
            stmt.bindString(7, attributionENOne);
        }
 
        String attributionCNTwo = entity.getAttributionCNTwo();
        if (attributionCNTwo != null) {
            stmt.bindString(8, attributionCNTwo);
        }
 
        String attributionENTwo = entity.getAttributionENTwo();
        if (attributionENTwo != null) {
            stmt.bindString(9, attributionENTwo);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Area readEntity(Cursor cursor, int offset) {
        Area entity = new Area( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // areaId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // areaNameCN
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // areaNameEN
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaNameShorter
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // countryCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // attributionCNOne
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // attributionENOne
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // attributionCNTwo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // attributionENTwo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Area entity, int offset) {
        entity.setAreaId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAreaNameCN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAreaNameEN(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaNameShorter(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCountryCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAttributionCNOne(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAttributionENOne(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAttributionCNTwo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAttributionENTwo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Area entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Area entity) {
        return null;
    }

    @Override
    public boolean hasKey(Area entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
