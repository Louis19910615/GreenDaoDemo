package louis.greendaodemo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import louis.greendaodemo.greendao.entity.Area;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA".
*/
public class AreaDao extends AbstractDao<Area, Void> {

    public static final String TABLENAME = "AREA";

    /**
     * Properties of entity Area.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AreaId = new Property(0, String.class, "areaId", false, "AREA_ID");
        public final static Property AreaNameCN = new Property(1, String.class, "areaNameCN", false, "AREA_NAME_CN");
        public final static Property AreaNameEN = new Property(2, String.class, "areaNameEN", false, "AREA_NAME_EN");
        public final static Property Country = new Property(3, String.class, "country", false, "COUNTRY");
        public final static Property AttributionCN = new Property(4, String.class, "attributionCN", false, "ATTRIBUTION_CN");
        public final static Property AttributionEN = new Property(5, String.class, "attributionEN", false, "ATTRIBUTION_EN");
    }


    public AreaDao(DaoConfig config) {
        super(config);
    }
    
    public AreaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA\" (" + //
                "\"AREA_ID\" TEXT UNIQUE ," + // 0: areaId
                "\"AREA_NAME_CN\" TEXT," + // 1: areaNameCN
                "\"AREA_NAME_EN\" TEXT," + // 2: areaNameEN
                "\"COUNTRY\" TEXT," + // 3: country
                "\"ATTRIBUTION_CN\" TEXT," + // 4: attributionCN
                "\"ATTRIBUTION_EN\" TEXT);"); // 5: attributionEN
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Area entity) {
        stmt.clearBindings();
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(1, areaId);
        }
 
        String areaNameCN = entity.getAreaNameCN();
        if (areaNameCN != null) {
            stmt.bindString(2, areaNameCN);
        }
 
        String areaNameEN = entity.getAreaNameEN();
        if (areaNameEN != null) {
            stmt.bindString(3, areaNameEN);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(4, country);
        }
 
        String attributionCN = entity.getAttributionCN();
        if (attributionCN != null) {
            stmt.bindString(5, attributionCN);
        }
 
        String attributionEN = entity.getAttributionEN();
        if (attributionEN != null) {
            stmt.bindString(6, attributionEN);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Area entity) {
        stmt.clearBindings();
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(1, areaId);
        }
 
        String areaNameCN = entity.getAreaNameCN();
        if (areaNameCN != null) {
            stmt.bindString(2, areaNameCN);
        }
 
        String areaNameEN = entity.getAreaNameEN();
        if (areaNameEN != null) {
            stmt.bindString(3, areaNameEN);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(4, country);
        }
 
        String attributionCN = entity.getAttributionCN();
        if (attributionCN != null) {
            stmt.bindString(5, attributionCN);
        }
 
        String attributionEN = entity.getAttributionEN();
        if (attributionEN != null) {
            stmt.bindString(6, attributionEN);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Area readEntity(Cursor cursor, int offset) {
        Area entity = new Area( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // areaId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // areaNameCN
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // areaNameEN
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // country
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // attributionCN
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // attributionEN
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Area entity, int offset) {
        entity.setAreaId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAreaNameCN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAreaNameEN(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountry(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAttributionCN(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAttributionEN(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Area entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Area entity) {
        return null;
    }

    @Override
    public boolean hasKey(Area entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
